#!/usr/bin/env bash
# (c) 2019 Michał Górny
# Released under the terms of the 2-clause BSD license

VERSION=1

die() {
	echo "${@}" >&2
	exit 1
}

print_usage() {
	echo "Usage: ${0} [<options>] <pr-number|pr-url|patch-url>..."
}

print_help() {
	print_usage
	echo
	echo "Merge specified GitHub PR(s) into the repository in current directory."
	echo
	echo "Options:"
	echo "  -b BUG, --bug BUG"
	echo "  -c BUG, --closes BUG"
	echo "                   Reference or close the specific bug, takes either"
	echo "                   a bug number or URL, can be specified multiple times"
	echo "  -e EDITOR, --editor EDITOR"
	echo "                   Override the editor used (default: \${EDITOR})"
	echo "  -I, --non-interactive"
	echo "                   Do not interactively ask to merge, just do it"
	echo "  -r REPO, --repository REPO"
	echo "                   GitHub repo to use (default: gentoo/gentoo)"
	echo "  -s, --signoff    Add Signed-off-by to commits (the default)"
	echo "  -S, --no-signoff Disable adding Signed-off-by to commits"
	echo
	echo "Parameters:"
	echo "  <pr-number>      GitHub PR number"
	echo "  <pr-url>         Full URL to the pull request"
	echo "  <patch-url>      URL to a patch file"
}

# add_trailer <file> <line-to-add>
add_trailer() {
	local file=${1}
	local line=${2}

	sed -i -e "1,/^---$/s@^---\$@${line}\n\0@" "${file}" ||
		die "Appending trailer via sed failed"
}

main() {
	# make sure files are sorted ascending
	local -x LC_COLLATE=C

	local bug=()
	local closes=()
	local editor=${EDITOR:-vim}
	local prs=()
	local repo=gentoo/gentoo
	local signoff=1
	local interactive=1

	while [[ ${#} -gt 0 ]]; do
		case ${1} in
			-h|--help)
				print_help
				exit 0
				;;
			-V|--version)
				echo "pram ${VERSION}"
				exit 0
				;;

			-b|--bug)
				[[ ${#} -gt 1 ]] || die "${0}: missing argument to ${1}"
				bug+=( "${2}" )
				shift
				;;
			-b*)
				bug+=( "${1#-b}" )
				;;
			--bug=*)
				bug+=( "${1#*=}" )
				;;
			-c|--closes)
				[[ ${#} -gt 1 ]] || die "${0}: missing argument to ${1}"
				closes+=( "${2}" )
				shift
				;;
			-c*)
				closes+=( "${1#-c}" )
				;;
			--closes=*)
				closes+=( "${1#*=}" )
				;;
			-e|--editor)
				[[ ${#} -gt 1 ]] || die "${0}: missing argument to ${1}"
				editor=${2}
				shift
				;;
			-e*)
				editor=${1#-e}
				;;
			--editor=*)
				editor=${1#*=}
				;;
			-I|--non-interactive)
				interactive=
				;;
			-r|--repository)
				[[ ${#} -gt 1 ]] || die "${0}: missing argument to ${1}"
				repo=${2}
				shift
				;;
			-r*)
				repo=${1#-r}
				;;
			--repository=*)
				repo=${1#*=}
				;;
			-s|--signoff)
				signoff=1
				;;
			-S|--no-signoff)
				signoff=
				;;
			-*)
				print_usage >&2
				exit 1
				;;
			*)
				prs+=( "${1}" )
				;;
		esac

		shift
	done

	if [[ -z ${prs[@]} ]]; then
		print_usage >&2
		exit 1
	fi

	if [[ $(git rev-parse --is-inside-work-tree) != true ]]; then
		echo "pram needs to be run inside the git checkout!" >&2
		exit 1
	fi

	tempdir=$(mktemp -d) || die "Unable to create a temporary directory"
	trap 'rm -r -f "${tempdir}"' EXIT

	local pr to_close
	for pr in "${prs[@]}"; do
		case ${pr} in
			*://github.com/*/*/pull/*)
				# GitHub URL
				to_close=${pr%.patch}
				pr=${to_close}.patch
				;;
			*://*.bugs.gentoo.org/attachment.cgi?*)
				# Gentoo Bugzilla attachment
				# (get bug no from domain name)
				to_close=${pr%%.bugs*}
				to_close="https://bugs.gentoo.org/${to_close#*://}"
				;;
			*://*)
				# arbitrary URL
				to_close=
				;;
			[0-9]*)
				# a number?
				to_close="https://github.com/${repo}/pull/${pr}"
				pr=${to_close}.patch
				;;
			*)
				# a local file maybe?
				to_close=
				[[ -f ${pr} ]] ||
					die "Parameter neither an URL, number or file: ${pr}"
				cp "${pr}" "${tempdir}"/all.patch || die "Copying patch failed"
				pr=
				;;
		esac
		if [[ -n ${pr} ]]; then
			wget -O "${tempdir}/all.patch" "${pr}" || die "Fetching patch failed"
		fi
		git mailsplit -o"${tempdir}" "${tempdir}/all.patch" >/dev/null ||
			die "Splitting patches failed"

		local patches=( "${tempdir}"/[0-9]* )
		if [[ ${signoff} ]]; then
			local f
			for f in "${patches}"; do
				if ! grep -q '^Signed-off-by:' "${f}"; then
					die "Commit no. ${f##*/} was not signed off by the author!"
				fi
			done
		fi

		# append bug references
		local b
		for b in "${bug[@]}"; do
			[[ ${b} != *://* ]] && b=https://bugs.gentoo.org/${b}
			add_trailer "${patches[-1]}" "Bug: ${b}"
		done
		for b in "${closes[@]}"; do
			[[ ${b} != *://* ]] && b=https://bugs.gentoo.org/${b}
			add_trailer "${patches[-1]}" "Closes: ${b}"
		done
		# append Closes: to the final commit if missing
		if [[ -n ${to_close} ]]; then
			if ! grep -q "^Closes: ${to_close}" "${patches[-1]}"; then
				add_trailer "${patches[-1]}" "Closes: ${to_close}"
			fi
		fi

		# concatenate the patches back
		cat "${patches[@]}" > "${tempdir}/all.patch" ||
			die "Concatenating patches failed"

		${editor} "${tempdir}/all.patch" || die "Starting editor failed"

		if [[ ! -s ${tempdir}/all.patch ]]; then
			echo "Patch is empty now, skipping." >&2
			continue
		fi

		if [[ ${interactive} ]]; then
			local answer
			read -p "Do you want to merge this? (Y/n/q) " answer
			case ${answer,,} in
				y|"")
					;;
				q)
					return 0
					;;
				*)
					echo "This merge has been skipped!"
					continue
					;;
			esac
		fi
		git am ${signoff:+-s} "${tempdir}/all.patch" || die "git am failed"
	done
}

main "${@}"
